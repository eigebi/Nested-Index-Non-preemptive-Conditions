import numpy as np
from multiprocessing import Pool
from scipy.optimize import fsolve, linprog, minimize,LinearConstraint, NonlinearConstraint
import cvxpy as cp
import time


import warnings
warnings.filterwarnings('ignore', 'The iteration is not making good progress')
warnings.filterwarnings('ignore', 'invalid value encountered in scalar multiply')

# according to partial_index.py, we need the input of [[In1,In2],...].
# we need the order of each value pair [[id, hn],...] and the dual virables vector [v1,v2]

class IntraIndex:
    def __init__(self,probn) -> None:
        # input the whole vectore of probn, and choose the correct p1,p2 by index in the compute function
        self.probn = probn
        self.v = np.zeros(2)
        pass

    #this equation is correct
    def f(self,v,h,p):
        #the original equations
        temp_g = -((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2)/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1)
        sum_vh1 = (h[0] - h[1] + 1)/p[0] - (1 - p[0])**(h[1] - 1) + (((h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0])*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1) - (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*((h[0]*(h[0] - 1))/2 + ((h[0] - 1)*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))*(1 - p[0])**h[0] - (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 - ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1] + ((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2)/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 + (((h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1])*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1) - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*((h[0]*(h[0] - 1))/2 + ((h[0] - 1)*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((h[0] - 1)*(1 - p[0])**h[0])/p[0] + (1 - p[0])**h[1]/(p[0]*p[1])
        sum_vh2 = (1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[0] - h[1] + 1)/p[0] + (((h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1])*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1) - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*((h[0]*(h[0] - 1))/2 + ((h[0] - 1)*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))*(1 - p[1])**h[0] - ((1 - p[1])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1] + ((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2)/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 + (((h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1])*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1) - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*((h[0]*(h[0] - 1))/2 + ((h[0] - 1)*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])
        #print(temp_g,sum_vh1,sum_vh2)
        #return np.mean(np.square([temp_g-1/p[0]-h[0]+1,
        #                          (1-p[1])**2/p[1]**2-(1-p[0])**2/p[0]**2+((1-p[1])/p[1]-(1-p[0])/p[0])*h[1]-v[0]/p[0]+(1-p[1])/p[1]*v[1]-(1/p[1]-1/p[0])*temp_g+sum_vh2-sum_vh1+v[1]]))
        return [temp_g-1/p[0]-h[0]+1,
                (1-p[1])**2/p[1]**2-(1-p[0])**2/p[0]**2+((1-p[1])/p[1]-(1-p[0])/p[0])*h[1]-v[0]/p[0]+(1-p[1])/p[1]*v[1]-(1/p[1]-1/p[0])*temp_g+sum_vh2-sum_vh1+v[1]]
        

                #(1-p[1])/p[1]**2-(1-p[0])/p[0]**2+h[1]/p[1]-(h[1]-1)/p[0]-(1/p[1]-1/p[0])*temp_g+v[1]/p[1]-v[0]/p[0]+sum_vh2-sum_vh1-1/p[1]]))/100000.
    
    def ff(self,v,h,p):
        #here we maximize v against constraints to derive the index
        temp_g = -((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2)/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1)
        sum_vh1 = (h[0] - h[1] + 1)/p[0] - (1 - p[0])**(h[1] - 1) + (((h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0])*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1) - (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*((h[0]*(h[0] - 1))/2 + ((h[0] - 1)*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))*(1 - p[0])**h[0] - (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 - ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1] + ((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2)/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 + (((h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1])*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1) - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*((h[0]*(h[0] - 1))/2 + ((h[0] - 1)*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((h[0] - 1)*(1 - p[0])**h[0])/p[0] + (1 - p[0])**h[1]/(p[0]*p[1])
        sum_vh2 = (1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[0] - h[1] + 1)/p[0] + (((h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1])*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1) - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*((h[0]*(h[0] - 1))/2 + ((h[0] - 1)*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))*(1 - p[1])**h[0] - ((1 - p[1])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1] + ((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2)/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 + (((h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1])*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1) - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*((h[0]*(h[0] - 1))/2 + ((h[0] - 1)*((1 - p[0])**(h[1] - 1) - (h[0] + v[0])/p[0] - (h[0]*(h[0] - 1))/2 - (h[0] - h[1] + 1)/p[0] + (p[0] - 1)/p[0]**2 + (h[0]*(h[0] - 1)*(1 - p[0])**h[0])/2 + (((1 - p[0])**(h[1] - h[0] - 1) - 1)*(1 - p[0])**h[0])/p[0]**2 + (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0]**2 + ((1 - p[0])**(h[1] - 1)*((1 - p[1])**h[1]/p[1]**2 - (1 - p[1])**(h[1] - 1) + (h[1] + v[1])/p[1] + (h[0] - h[1] + 1)/p[0] - (p[1] - 1)/p[1]**2 - (h[0]*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] + (h[0]*((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0])/2 - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - ((h[0] - 1)*(1 - p[0])**h[0])/p[0] - (1 - p[0])**h[1]/(p[0]*p[1]) - (h[0]*((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0])/2))/(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])))/((1 - p[1])**(h[1] - 1) - 1) - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]**2 + ((h[0] - 1)*(1 - p[1])**h[0])/p[1] - (((1 - p[1])**(h[1] - h[0] - 1) - 1)*(1 - p[1])**h[0])/(p[0]*p[1])
        #print(temp_g,sum_vh1,sum_vh2)
        #return np.mean(np.square([temp_g-1/p[0]-h[0]+1,
        #                          (1-p[1])**2/p[1]**2-(1-p[0])**2/p[0]**2+((1-p[1])/p[1]-(1-p[0])/p[0])*h[1]-v[0]/p[0]+(1-p[1])/p[1]*v[1]-(1/p[1]-1/p[0])*temp_g+sum_vh2-sum_vh1+v[1]]))
        return [temp_g-1/p[0]-h[0]+1,#>=0
                (1-p[1])**2/p[1]**2-(1-p[0])**2/p[0]**2+((1-p[1])/p[1]-(1-p[0])/p[0])*h[1]-v[0]/p[0]+(1-p[1])/p[1]*v[1]-(1/p[1]-1/p[0])*temp_g+sum_vh2-sum_vh1+v[1]]# >=0
        

    def compute_single(self,data):
        id = data[0]
        h = data[1]
        v = self.v
        p = self.probn[id]
        f1 = lambda x: self.f([x[0],v[1]],[h,x[1]],p)
        f2 = lambda x: self.f([v[0],x[0]],[x[1],h],p)
        v1,_ = fsolve(f1,[0,0])#there maybe multiple solutions, depends on the initial point
        v2,_ = fsolve(f2,[0,0])
        # we can also use another method, to minimize the mse loss
        #con1 = LinearConstraint(np.array([[-1,0],[1,0],[0,-1]]),ub=np.array([0,v[1],-h]))
        #con2 = LinearConstraint(np.array([[-1,0],[0,-1],[0,1]]),ub=np.array([-v[0],0,h]))
        #v1,_ = minimize(f1,[0,0],constraints=con1).x
        #v2,_ = minimize(f2,[0,0],constraints=con2).x
        return [id,v1,v2]
    
    def compute(self,h,v):
        #generate h with index
        self.v = v
        input = np.concatenate((np.arange(0,len(h)),h),0).reshape(2,-1).transpose(1,0)
        ''' test for single process
        start = time.time()
        for i in range(len(h)):
            x = self.compute_single(input[i])
        end = time.time()
        print('single process time:{:.5f}s'.format(end-start))
        '''
        #start = time.time()
        with Pool(20) as p:
            x = p.map(self.compute_single,input)
            p.close()
            p.join()
        #end = time.time()
        #print('multi-process timetime:{:.5f}s'.format(end-start))
    
        return np.array(x)
    
    def opt_dual_value(self,v,p_,t_,n_):
        ave_v = np.zeros(2)
        for p,t,n in zip(p_,t_,n_):
            f = lambda x: self.f(v,[x[0],x[1]],p)
            ff =  lambda x: self.ff(  )
            con = LinearConstraint([[1,0],[0,1],[1,-1]],ub=np.array([np.inf,np.inf,0]),lb=np.array([0,0,-np.inf]))
            non_con = NonlinearConstraint(ff,lb=0)
            h = fsolve(f,[1,3])
            temp = [1/(p[0]*(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1)),
                    -(1 - p[0])**(h[1] - 1)/(p[1]*((1 - p[1])**(h[1] - 1) - 1)*(h[0] + (h[0] - 1)*(1 - p[0])**h[0] + 1/p[0] - ((1 - p[0])**(h[1] - 1)*((h[0] - 1)*(1 - p[1])**h[0] + 1/p[1] + ((1 - p[1])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[1])**h[0] - (((1 - p[1])**(h[0] - 1) - 1)*(p[1] - 1))/p[1]))/((1 - p[1])**(h[1] - 1) - 1) + ((1 - p[0])**(h[1] - h[0] - 1) - 1)*(h[0] - 1)*(1 - p[0])**h[0] - (((1 - p[0])**(h[0] - 1) - 1)*(p[0] - 1))/p[0] - 1))]
            ave_v += n*np.array(temp)
        return np.array(ave_v)



#utilize cvxpy to derive the optimal solution and the corresponding dual values  
class MIP:
    def __init__(self,num_n,num_m,available_m) -> None:
        self.n = num_n
        self.m = num_m
        self.available_m = available_m
        self.A_ub = np.concatenate((np.kron(np.ones(self.m),np.identity(self.n)),np.kron(np.identity(self.m),np.ones(self.n))),0)
        self.B_ub = np.concatenate((np.array([1 for _ in range(self.n)]),self.available_m),0)
        #self.x_box = [(0,1) for _ in range(self.n*self.m)]
        #self.dual_box = [(0,50000) for _ in range(self.n+self.m)]
        self.A_ub = np.concatenate((np.diag(-np.ones(self.n*self.m)),self.A_ub),0)
        self.B_ub = np.concatenate((np.zeros(self.n*self.m),self.B_ub),0)

    def cal_arm(self, index, available_m=None):
        if available_m is not None:
            self.available_m = available_m
        # here the index of multiple arm can not be exactly the same. give some randomness
        idx = np.array(index).transpose([1,0]).reshape(-1)
        idx += np.random.randn(idx.shape[0])/100.
        idx = np.maximum(idx,0)
        x = cp.Variable(self.n*self.m)
        prob = cp.Problem(cp.Minimize(-idx.T@x),
                          [self.A_ub@x <= self.B_ub])
        prob.solve()
        #res = linprog(-idx,self.A_ub,self.B_ub,None,None,self.x_box)
        #dual = linprog(self.B_ub.T,-self.A_ub.T,-idx.T,None,None,self.dual_box)
        return np.array(np.isclose(x.value,1,atol=1e-3),dtype=np.int8),prob.constraints[0].dual_value[-self.m:]






if __name__=="__main__":
    scalar = 50
    probn = [[0.1,0.6],[0.2,0.6],[0.3,0.7]]*scalar# if the prob is not listed in an ascent order, we can adjust them
    II = IntraIndex(probn)
    h = np.array([5,7,24]*scalar)
    v = 5*np.ones(2)
    
    s = time.time()
    
    for _ in range(1):
        index = II.compute(h,v)
        index = index[:,1:]
        opt = MIP(3*scalar,2,[3,2])
        print(opt.cal_arm(index))
    e = time.time()
    print("time: {:.5f}".format(e-s))

